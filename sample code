//SPDX-License-Identifier: unlicensed
pragma solidity >= 0.5.0 < 0.9.0;

//-----------------------------------------------------------------------

//by RAUSHAN KUMAR

//creating E-commerce Contract

//---------------------------------------------------------------

contract Ecommerce {

    struct product {
        string title;
        string desc;
        address payable seller;
        uint productId;
        uint price;
        address buyer;
        bool delivered;
    }

    uint counter = 1;
    product[] public products;

    address payable public manager;
    bool detroyed = false;

    modifier isNotDestroyed{
        require(!detroyed, "Contract deosn't exits");
        _;
    }

    constructor() {
        manager = payable(msg.sender);
    }

    event registered(string title, uint productId, address selletr);
    event bought(uint productId, address buyer);
    event delivered(uint productId);
    
    function registerProduct(string memory _title, string memory _desc, uint _price) public isNotDestroyed{
        require(_price > 0 , "Price must be greater than zero");

        product memory tempProduct;
        tempProduct.title = _title;
        tempProduct.desc = _desc;
        tempProduct.price = _price*10**18;     // price value in wein.
        tempProduct.seller = payable(msg.sender);
        tempProduct.productId = counter;
        products.push(tempProduct);
        counter++;

        emit registered(_title, tempProduct.productId, msg.sender);
    }

    function buy(uint _productId) payable public isNotDestroyed{
        require(products[_productId-1].price == msg.value, "Please, pay the exact price");
        require(products[_productId-1].seller != msg.sender, "Seller mustnot be the buyer");
        products[_productId-1].buyer = msg.sender;
        emit bought(_productId, msg.sender);
    }

    function delivery(uint _productId) public isNotDestroyed{
        require(products[_productId-1].buyer == msg.sender, "Only buyer can confirm");
        products[_productId-1].delivered = true;
        products[_productId-1].seller.transfer(products[_productId-1].price);
        emit delivered(_productId);
    }

    function destroy() public isNotDestroyed{
        require(msg.sender == manager, "only manager can call this function");
        manager.transfer(address(this).balance);
        destroyed = true;
    }

    fallback() payable external{
        payable(msg.sender).transfer(msg.value);
    }
}

